;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;
;  Written by Steward_Fu (steward.fu@gmail.com)
;  https://steward-fu.github.io/website/index.htm
;  
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
;//#define WDF_DRIVER_GLOBALS_NAME_LEN (32)
WDF_DRIVER_GLOBALS_NAME_LEN equ 32

;//typedef struct _WDF_DRIVER_GLOBALS {
;//
;//    // backpointer to the handle for this driver
;//    WDFDRIVER Driver;
;//
;//    // Flags indicated by the driver during create
;//    ULONG DriverFlags;
;//
;//    // Tag generated by WDF for the driver.  Tag used by allocations made on
;//    // behalf of the driver by WDF.
;//    ULONG DriverTag;
;//
;//    CHAR DriverName[WDF_DRIVER_GLOBALS_NAME_LEN];
;//
;//    // If TRUE, the stub code will capture DriverObject->DriverUnload and insert
;//    // itself first in the unload chain.  If FALSE, DriverUnload is left alone
;//    // (but WDF will not be notified of unload and there will be no auto cleanup).
;//    BOOLEAN DisplaceDriverUnload;
;//
;//} WDF_DRIVER_GLOBALS, *PWDF_DRIVER_GLOBALS;
_WDF_DRIVER_GLOBALS struct
  Driver WDFDRIVER <>
  DriverFlags DWORD ?
  DriverTag DWORD ?
  DriverName BYTE WDF_DRIVER_GLOBALS_NAME_LEN dup(?)
  DisplaceDriverUnload BOOLEAN ?
_WDF_DRIVER_GLOBALS ends
PWDF_DRIVER_GLOBALS typedef ptr _WDF_DRIVER_GLOBALS